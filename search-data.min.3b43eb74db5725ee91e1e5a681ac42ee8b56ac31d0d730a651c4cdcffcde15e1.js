(function(){const pages=[{"idx":0,"href":"/docs/docker/","title":"Docker","content":" Docker Portainer Portainer - is very useful GUI for managing Docker\u0026rsquo;s hosts and clusters. Simply open port 9000 on your host, run container and open in your browser host_ip:9000, create user and manage all your containers.\ndocker container run -d \\  -p 9000:9000 \\  -v /var/run/docker.sock:/var/run/docker.sock portainer/portainer Install Docker The Docker installation package available in the official Ubuntu repository may not be the latest version. To ensure we get the latest version, we’ll install Docker from the official Docker repository. To do that, we’ll add a new package source, add the GPG key from Docker to ensure the downloads are valid, and then install the package.\nFirst, update your existing list of packages:\nsudo apt update Next, install a few prerequisite packages which let apt use packages over HTTPS:\nsudo apt install apt-transport-https ca-certificates curl software-properties-common Then add the GPG key for the official Docker repository to your system:\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - Add the Docker repository to APT sources:\nsudo add-apt-repository \\ \u0026#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\u0026#34; Next, update the package database with the Docker packages from the newly added repo and install Docker:\nsudo apt update sudo apt install docker-ce Docker should now be installed, the daemon started, and the process enabled to start on boot. Check that it’s running:\nsudo systemctl status docker The output should be similar to the following, showing that the service is active and running:\nOutput\n● docker.service - Docker Application Container Engine Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled) Active: active (running) since Thu 2018-07-05 15:08:39 UTC; 2min 55s ago Docs: https://docs.docker.com Main PID: 10096 (dockerd) Tasks: 16 CGroup: /system.slice/docker.service ├─10096 /usr/bin/dockerd -H fd:// └─10113 docker-containerd --config /var/run/docker/containerd/containerd.toml  Installing Docker now gives you not just the Docker service (daemon) but also the docker command line utility, or the Docker client.\nUnderstanding containers has to cover things like chroot, the container file system and layers, cgroup isolation, and talk about the pros/cons of containers.\nAn explanation of how these work without a discussion of cgroups and how that facilitates process/memory/network isolation is going to sound weak to an interviewer. So read up on how cgroups are implemented in the kernel. Then learn about the different ways lxc containers work vs docker containers. Then learn about emerging container specification standards. Why are they happening? Understand what’s going on both under the hood in the kernel and the shifts happening in the industry.\nchroot A chroot environment provides functionality similar to that of a virtual machine, but it is a lighter solution. The captive system doesn’t need a hypervisor to be installed and configured, such as VirtualBox or Virtual Machine Manager. Nor does it need to have a kernel installed in the captive system. The captive system shares your existing kernel.\nCreating chroot environment We need a directory to act as the root directory of the chroot environment. So that we have a shorthand way of referring to that directory we’ll create a variable and store the name of the directory in it. Here we’re setting up a variable to store a path to the “testroot” directory. It doesn’t matter if this directory doesn’t exist yet, we’re going to create it soon. If the directory does exist, it should be empty.\nchr=/home/dave/testroot mkdir -p $chr We need to create directories to hold the portions of the operating system our chroot environment will require. We’re going to set up a minimalist Linux environment that uses Bash as the interactive shell. We’ll also include the touch, rm, and ls commands. That will allow us to use all Bash’s built-in commands and touch, rm, and ls. We’ll be able to create, list and remove files, and use Bash. And—in this simple example—that’s all.\nmkdir -p $chr/{bin,lib,lib64} cd $chr Let’s copy the binaries that we need in our minimalist Linux environment from your regular “/bin” directory into our chroot “/bin” directory. The -v (verbose) option makes cp tell us what it is doing as it performs each copy action.\ncp -v /bin/{bash,touch,ls,rm} $chr Dependencies These binaries will have dependencies. We need to discover what they are and copy those files into our environment. This way, for example we can add all dependencies for /bin/bash:\nlist=\u0026#34;$(ldd /bin/bash | egrep -o \u0026#39;/lib.*\\.[0-9]\u0026#39;)\u0026#34; for i in $list; do cp -v --parents \u0026#34;$i\u0026#34; \u0026#34;${chr}\u0026#34;; done Use that technique to capture the dependencies of each of the other commands. Or you can write one more loop through all your apps.\nchroot command The last of our dependencies are copied into our chroot environment. We’re finally ready to use the chroot command. This command sets the root of the chroot environment, and specifies which application to run as the shell.\nsudo chroot $chr /bin/bash Our chroot environment is now active. The terminal window prompt has changed, and the interactive shell is the being handled by the bash shell in our environment.\nUse exit to leave the chroot environment:\nexit"},{"idx":1,"href":"/docs/docker/commans/","title":"Cheatsheet","content":" Docker commands cheat-sheet https://docs.docker.com\nContainers docker container ls # docker ps docker container top {cont_name} # top command for cont docker container inspect {cont_name} # json with all cont parameters docker container inspect {cont_name} --format \u0026#39;{{ .NetworkSettings.IPAddress}}\u0026#39; docekr container stats # like watch command but for containers docker container start # start stopped cont docker container post {cont_name} # shows shared ports Network docker network ls docker network inspect {network_name} docker network create --driver docker network connect {network_name} docker network disconnect {network_name} Delete all running and stopped containers docker container rm -f $(docker ps -aq) Print the last container’s logs docker container logs --tail 100 web Docker commands list app Docker Application\nassemble Framework-aware builds\nbuilder Manage builds\ncluster Manage Docker clusters (Docker Enterprise)\nconfig Manage Docker configs\ncontext Manage contexts\nengine Manage the docker Engine\nimage Manage images\nnetwork\nnode Manage Swarm nodes\nplugin Manage plugins\nregistry Manage Docker registries\nsecret\nservice\nstack Manage Docker stacks\nswarm\nsystem Manage Docker\ntemplate Quickly scaffold services\ntrust\nvolume Manage volumes\n"},{"idx":2,"href":"/docs/dev-tools/git/","title":"Git Tricks","content":" Git tips and tricks Sometimes you have to make very rare manipulations with your git repo and can\u0026rsquo;t remember how exactly it works\u0026hellip; so I\u0026rsquo;m collecting here such useful git use cases.\nMerge with squash Merge from branch with squash will erase all commits history in the branch\n# Work in feature/1 branch git branch \u0026#34;feature/1\u0026#34; git checkout \u0026#34;feature/1\u0026#34; # Move to the master branch. git checkout master # Merge the \u0026#34;feature/1\u0026#34; branch and squash the commits. git merge --squash feature/1 # Resolve conflicts # Commit your changes and add a single commit message for all your commits. # You can omit the \u0026#34;-m\u0026#34; to have a template popping up based on your previous commit messages. git commit -m \u0026#34;Feature 1 : 1, 2 et 3\u0026#34; # Delete the \u0026#34;feature/1\u0026#34; branch that is no longer needed. git branch -D feature/1 Reset Soft You\u0026rsquo;ve done a few tiny commits and want them all be put into one commit:\nA -\u0026gt; B -\u0026gt; C -\u0026gt; D || A with ALL (B,C,D) -\u0026gt; E\ngit reset --soft A git commit -m “my new merged commit” git push origin branch New commit E contains all of the files that were committed in B, C, D.\nMixed You’ve just pushed a few commits, but you want to go back and remove a couple of files in a previous commit.\nA -\u0026gt; B-\u0026gt; C -\u0026gt; D || A with ANY (B,C,D) -\u0026gt; E\ngit reset --mixed A Your branch head and index is pointing at A and all of your changes in B, C and D are there, but are untracked. Now you are free to add the files that you wish to add into a new commit.\ngit add \u0026lt;files\u0026gt; git commit -m \u0026#34;updated commit\u0026#34; git push origin branch The head is now at the new commit E, and any files that you’ve not staged will still be in your working tree, ready to add into another commit or to do what you want with.\nHard Do it only if you want to go back a few commits and get rid of every change you’ve made since.\ngit reset --hard A git push origin branchname --force This will delete your commits from the remote branch history.\n"},{"idx":3,"href":"/docs/AWS/","title":"A W S","content":" Amazon Web Services Coming very soon\u0026hellip;\n"},{"idx":4,"href":"/docs/dev-tools/python/","title":"Python","content":" Lambda, map, reduce, filter # Lambda foo = lambda n: n**2 if n % 2 == 0 else n**3 foo(5) # Output: 125 # Map col = [6, 10, 12, 15, 19] mapped = map(lambda x: x*10, col) # mapped = [60, 100, 120, 150, 190] # Filter filtered = filter(lambda x: x % 2 == 0 and x \u0026gt; 7, col) # filtered = [10, 12] # Reduce from functools import reduce reduced = reduce(lambda x, y: x * y + 10, col) # reduced = 242450 globals() locals() type(\u0026lt;object\u0026gt;) -\u0026gt; \u0026lt;ClassName\u0026gt; isinstance(\u0026lt;object\u0026gt;, \u0026lt;ClassName\u0026gt;) -\u0026gt; Boolean globals() -\u0026gt; dict with global vars locals() -\u0026gt; dict with local vars  Context managers with open(\u0026#34;example.txt\u0026#34;, \u0026#34;w\u0026#34;) as file: # logic Two special methods: enter() and after(). They take care of what happens when execution enters and exits your with block respectively.\nfrom datetime import datetime class DataManager(): def __init__(self): self.file = None def __enter__(self): now = str(datetime.now()).split(\u0026#34;.\u0026#34;)[0].replece(\u0026#34; \u0026#34;, \u0026#34;-\u0026#34;).replace.(\u0026#34;:\u0026#34;,\u0026#34;-\u0026#34;) filename = now + \u0026#34;-DATA.txt\u0026#34; self.file = open(filename, \u0026#34;w\u0026#34;) return self.file def __exit__(self, exc_type, exc_value, exc_traceback): self.file.close() print (\u0026#34;File closed\u0026#34;) with DataManager() as data: data.write(\u0026#34;hello!\u0026#34;) Decorators def is_positive(func): def wrapper(*args, **kwargs): for arg in args: if arg \u0026lt; 0: raise Exception(\u0026#34;Negative Number!\u0026#34;) return func(*args, **kwargs) return wrapper @is_positive def my_function(agr1, agr2): return arg1 + arg2 Same decorations with class and special method call():\nclass is_positive(): def __init__(self, func): self.function = func def __call__(self, *args, **kwargs): for arg in args: if arg \u0026lt; 0: raise Exception(\u0026#34;Negative Number!\u0026#34;) return self.function(*args, **kwargs) @is_positive def my_function(agr1, agr2): return arg1 + arg2 Generators def squares(a, b): i = a while i \u0026lt; b: y yield i**2 i += 1 s = squares(5, 10) next(s)"},{"idx":5,"href":"/docs/AWS/useful-tips/","title":"Useful Tips","content":" Useful tips for AWS Services "},{"idx":6,"href":"/docs/dev-tools/javascript/","title":"Javascript","content":""},{"idx":7,"href":"/docs/linux/","title":"Linux","content":" Linux Coming soon\u0026hellip;\n"},{"idx":8,"href":"/docs/dev-tools/one-liners/","title":"Bash oneliners","content":" Replase text in template Replase TEMPLATE_TEXT with $BUILD_NUMBER var inside filename.json.template and save it into filename.json\nsed \u0026#34;s/TEMPLATE_TEXT/1.$BUILD_NUMBER/g\u0026#34; \\  filename.json.template \u0026gt; filename.json"},{"idx":9,"href":"/docs/dev-tools/","title":"Dev Tools","content":" Dev Tools Many interesting and useful DevOps tools will be described here soon. You can write in comments what exactly you wanna see here.\n"},{"idx":10,"href":"/docs/miscellaneous/to-read/","title":"to Read","content":" Useful Links r/devops\nBooks My current have-to-be-read list The Kubernetes Scheduler\nImperative vs. Declarative — a Kubernetes Tutorial\nDeploy a Kubernetes Cluster with Cluster Monitoring in Amazon EC2 using Rancher\n10 Advanced Tricks with Docker\n50 Useful Docker Tutorials, From Beginner to Advanced\nЗнакомство с Kubernetes\nSecurity as Standard in the Land of Kubernetes.\n10 Data Structure, Algorithms, and Programming Courses to Crack Any Coding Interview\nCRUD App using Vue.js and Django\nComparing Kubernetes CNI Providers: Flannel, Calico, Canal, and Weave\n"},{"idx":11,"href":"/docs/miscellaneous/","title":"Miscellaneous","content":"This section is for my own notes, tests and tryouts. Maybe some ideas and drafts.\n"},{"idx":12,"href":"/","title":"Introduction","content":" Collection of manuals and notes for DevOps Here I\u0026rsquo;m collecting some interesting manuals and notes about technologies and processes I used in my work. All these materials I\u0026rsquo;ve collected for my personal use but you are free to use it and post it anywhere.\nIf you have any advice, recommendations please, write comment on this page with details and I\u0026rsquo;ll answer as soon as possible.\nThis site is still on restructure process and has many empty or Lorem pegas. Sorry for this, I\u0026rsquo;m working\u0026hellip; :)\nThe diploma gets you the interview, your personality gets you your first work, and your experience decides your pay.\nCurrent technologies stack Est in vagis et Pittheus tu arge accipiter regia iram vocatur nurus. Omnes ut olivae sensit arma sorori deducit, inesset crudus, ego vetuere aliis, modo arsit? Utinam rapta fiducia valuere litora adicit cursu, ad facies  My current work For now, I\u0026rsquo;m working on big cloud and hosting provider in position Cloud System Engineer. We based on ESXi and have hundreds of servers in 8 countries. Day by day we support our customers and troubleshut their virtual machines and software on them. Also, make infrastructure migrations from or to any other cloud providers, such as AWS, Google, Azure, Digital Ocean, etc. Or build multi-cloud solutions for customers with special requirements.   Tempora nisi nunc Lorem markdownum emicat gestu. Cannis sol pressit ducta. Est Idaei, tremens ausim se tutaeque, illi ulnis hausit, sed, lumina cutem. Quae avis sequens!\nvar panel = ram_design; if (backup + system) { file.readPoint = network_native; sidebar_engine_device(cell_tftp_raster, dual_login_paper.adf_vci.application_reader_design( graphicsNvramCdma, lpi_footer_snmp, integer_model)); } public_keyboard_docking += error.controller_gibibyte_plug.ip(4, asciiPetaflops, software(supercomputer_compatible_status + 4)); dynamic_disk.indexModeLaptop = bufferTftpReality; var export_vlog_sequence = trinitron_flowchart + supercomputer_cluster_rj( -1, toolbar_powerpoint_query, -2 / multiprocessing_impression);  Locis suis novi cum suoque decidit eadem Idmoniae ripis, at aves, ali missa adest, ut et autem, et ab? Venit spes versus finis sermonibus patefecit murum nec est sine oculis. Ille inmota macies domoque caelestia cadit tantummodo scelus procul, corde!\n Dolentem capi parte rostro alvum habentem pudor Fulgentia sanguine paret E punior consurgit lentus Vox hasta eras micantes  Facibus pharetrae indetonsusque indulsit sic incurrite foliis Nefandam et prisci palmas! Blandita cutis flectitur montis macies, te nati Latiis; turbaque inferias. Virginis tibi peracta avidusque facies caper nec, e at ademptae, mira.\ndirect *= font(inputScareware(sliHome), crossplatform.byte( ppl_encryption.excel_e_rte(integratedModelModifier), timeVirtual, floating_speakers.media_printer(us, yahoo, primaryPhp))); friendly_metal_flatbed(cd, isoPrimaryStorage(reader), dmaMirrored); if (parse_flash_cron.metalGif(1, adServiceDevice, utility)) { adf -= operation_cdma_samba; imapGif.switch += torrent; } else { pmu.disk_captcha = digital_ppp_pci + recursionTransistor(5, dram); ajax_service += grayscalePythonLock; google_scroll_capacity = ftp + engine_dslam_sidebar / tape - 1; } drive_rw = zipTftp; var suffix = software_router_extension.dimm_ddr(-5, kernel_digital_minisite);  Vocavit toto; alas mitis maestus in liquidarum ab legi finitimosque dominam tibi subitus; Orionis vertitur nota. Currere alti etiam seroque cernitis innumeris miraturus amplectique collo sustinet quemque! Litora ante turba?\n"},{"idx":13,"href":"/posts/second/","title":"Lorem ipsum dolor sit amet","content":"Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Sed posuere consectetur est at lobortis. Nulla vitae elit libero, a pharetra augue. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\nAenean lacinia bibendum nulla sed consectetur. Nullam id dolor id nibh ultricies vehicula ut id elit. Donec id elit non mi porta gravida at eget metus. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.\n{{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;section id=content\u0026gt; \u0026lt;h1\u0026gt;{{ if .Params.heading }} {{ .Params.heading }} {{ else }} {{ .Title }} {{ end }}\u0026lt;/h1\u0026gt; {{ if .Params.date }} \u0026lt;div id=sub-header\u0026gt; {{ .Date.Format (.Site.Params.dateform | default \u0026quot;January 2006\u0026quot;) }} · {{ .ReadingTime }} minute read \u0026lt;/div\u0026gt; {{ end }} \u0026lt;div class=\u0026quot;entry-content\u0026quot;\u0026gt; {{ .Content }} \u0026lt;/div\u0026gt; \u0026lt;div id=links\u0026gt; {{ if .PrevInSection }} \u0026lt;a class=\u0026quot;basic-alignment left\u0026quot; href=\u0026quot;{{.PrevInSection.Permalink}}\u0026quot;\u0026gt;\u0026amp;laquo; {{.PrevInSection.Title}}\u0026lt;/a\u0026gt; {{ end }} {{ if .NextInSection }} \u0026lt;a class=\u0026quot;basic-alignment left\u0026quot; href=\u0026quot;{{.NextInSection.Permalink}}\u0026quot;\u0026gt;{{.NextInSection.Title}} \u0026amp;raquo;\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; {{ partial \u0026quot;footer.html\u0026quot; . }}  Sed posuere consectetur est at lobortis. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Etiam porta sem malesuada magna mollis euismod.\nAenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam quis risus eget urna mollis ornare vel eu leo. Vestibulum id ligula porta felis euismod semper. Donec ullamcorper nulla non metus auctor fringilla. Etiam porta sem malesuada magna mollis euismod.\nNullam quis risus eget urna mollis ornare vel eu leo. Nullam quis risus eget urna mollis ornare vel eu leo. Cras mattis consectetur purus sit amet fermentum. Nullam quis risus eget urna mollis ornare vel eu leo. Maecenas sed diam eget risus varius blandit sit amet non magna.\n"},{"idx":14,"href":"/posts/","title":"Posts","content":""},{"idx":15,"href":"/tags/Devops/","title":"Devops","content":""},{"idx":16,"href":"/tags/Geting-started/","title":"Geting started","content":""},{"idx":17,"href":"/posts/my-first-post/","title":"My First Post","content":"Purus Pellentesque Vehicula Condimentum Inceptos Nullam id dolor id nibh ultricies vehicula ut id elit. Etiam porta sem malesuada magna mollis euismod. Cras mattis consectetur purus sit amet fermentum. Nullam quis risus eget urna mollis ornare vel eu leo. Lorem ipsum dolor sit amet, consectetur adipiscing elit.\nVivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Sed posuere consectetur est at lobortis. Nulla vitae elit libero, a pharetra augue. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\nAenean lacinia bibendum nulla sed consectetur. Nullam id dolor id nibh ultricies vehicula ut id elit. Donec id elit non mi porta gravida at eget metus. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.\nAenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Curabitur blandit tempus porttitor. Vestibulum id ligula porta felis euismod semper. Lorem ipsum dolor sit amet, consectetur adipiscing elit.\nMorbi leo risus, porta ac consectetur ac, vestibulum at eros. Maecenas faucibus mollis interdum. Donec sed odio dui. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Integer posuere erat a ante venenatis dapibus posuere velit aliquet.\n"},{"idx":18,"href":"/tags/","title":"Tags","content":""},{"idx":19,"href":"/posts/goisforlovers/","title":"(Hu)go Template Primer","content":"My first action release! :) :) :) :) :) :) https://github.com/denzalman/hugo-build-action/releases/tag/v0.2 Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website.\nIf you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax Golang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }}  Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }}  Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }}  Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }}  Variables Each Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;  Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}} {{ $address }}  Functions Go template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }}  Includes When including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }}  Logic Go templates provide the most basic iteration and conditional logic.\nIteration Just like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }} {{ . }} {{ end }}  Example 2: Declaring value variable name\n{{range $element := array}} {{ $element }} {{ end }}  Example 2: Declaring key and value variable name\n{{range $index, $element := array}} {{ $index }} {{ $element }} {{ end }}  Conditionals If, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\n false 0 any array, slice, map, or string of length zero  Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }}  Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{else}} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}}  Example 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }}  Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{ else if isset .Params \u0026quot;caption\u0026quot; }} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Pipes One of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the input of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }}  is the same as\n{{ eq 1 1 | if }} Same {{ end }}  It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }}  Access the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Stuff Here {{ end }}  Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }} Stuff Here {{ end }}  Context (aka. the dot) The most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n {{ $title := .Site.Title }} {{ range .Params.tags }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt; {{ end }}  Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters Hugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters In each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n--- title: \u0026quot;Permalinks\u0026quot; date: \u0026quot;2013-11-18\u0026quot; aliases: - \u0026quot;/doc/permalinks/\u0026quot; groups: [\u0026quot;extras\u0026quot;] groups_weight: 30 notoc: true ---  Here is the corresponding code inside of the template:\n {{ if not .Params.notoc }} \u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt; {{ .TableOfContents }} \u0026lt;/div\u0026gt; {{ end }}  Using Site (config) Parameters In your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams: CopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34; TwitterUser: \u0026#34;spf13\u0026#34; SidebarRecentLimit: 5 Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt; \u0026lt;div class=\u0026quot;text-center\u0026quot;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt;{{end}}  An alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026quot;twitter\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;https://twitter.com/{{.}}\u0026quot; rel=\u0026quot;author\u0026quot;\u0026gt; \u0026lt;img src=\u0026quot;/images/twitter.png\u0026quot; width=\u0026quot;48\u0026quot; height=\u0026quot;48\u0026quot; title=\u0026quot;Twitter: {{.}}\u0026quot; alt=\u0026quot;Twitter\u0026quot;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt;{{end}}  Finally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026quot;recent\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{{.RelPermalink}}\u0026quot;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{end}}\u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; "},{"idx":20,"href":"/categories/","title":"Categories","content":""},{"idx":21,"href":"/categories/Development/","title":"Development","content":""},{"idx":22,"href":"/tags/development/","title":"development","content":""},{"idx":23,"href":"/tags/go/","title":"go","content":""},{"idx":24,"href":"/categories/golang/","title":"golang","content":""},{"idx":25,"href":"/tags/golang/","title":"golang","content":""},{"idx":26,"href":"/tags/templates/","title":"templates","content":""},{"idx":27,"href":"/tags/themes/","title":"themes","content":""},{"idx":28,"href":"/docs/","title":"Docs","content":""}];window.bookSearch={pages:pages,idx:lunr(function(){this.ref("idx");this.field("title");this.field("content");pages.forEach(this.add,this);}),}})();