<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on RTFM DevOps</title>
    <link>https://rtfmdev.github.io/</link>
    <description>Recent content in Introduction on RTFM DevOps</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Oct 2019 14:24:31 +0300</lastBuildDate>
    
	<atom:link href="https://rtfmdev.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://rtfmdev.github.io/docs/kubernetes/kubectl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rtfmdev.github.io/docs/kubernetes/kubectl/</guid>
      <description>kubectl cheatsheet Connection details To look at the connection details, we can either see the content of the ~/.kube/config file (on Linux) or run the following command:
$ kubectl config view Cluster info kubectl cluster-info When not using the kubectl proxy, we need to authenticate to the API server when sending API requests. We can authenticate by providing a Bearer Token when issuing a curl, or by providing a set of keys and certificates.</description>
    </item>
    
    <item>
      <title>Cheatsheet</title>
      <link>https://rtfmdev.github.io/docs/docker/commans/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rtfmdev.github.io/docs/docker/commans/</guid>
      <description>Docker commands cheat-sheet https://docs.docker.com
Containers docker container ls # docker ps docker container top {cont_name} # top command for cont docker container inspect {cont_name} # json with all cont parameters docker container inspect {cont_name} --format &amp;#39;{{ .NetworkSettings.IPAddress}}&amp;#39; docekr container stats # like watch command but for containers docker container start # start stopped cont docker container post {cont_name} # shows shared ports Network docker network ls docker network inspect {network_name} docker network create --driver docker network connect {network_name} docker network disconnect {network_name} Delete all running and stopped containers docker container rm -f $(docker ps -aq) Print the last container’s logs docker container logs --tail 100 web Docker commands list app Docker Application assemble Framework-aware builds builder Manage builds cluster Manage Docker clusters (Docker Enterprise) config Manage Docker configs context Manage contexts engine Manage the docker Engine image Manage images network</description>
    </item>
    
    <item>
      <title>Git Tricks</title>
      <link>https://rtfmdev.github.io/docs/devops-tools/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rtfmdev.github.io/docs/devops-tools/git/</guid>
      <description>Git tips and tricks Sometimes you have to make very rare manipulations with your git repo and can&amp;rsquo;t remember how exactly it works&amp;hellip; so I&amp;rsquo;m collecting here such useful git use cases.
Merge with squash Merge from branch with squash will erase all commits history in the branch
# Work in feature/1 branch git branch &amp;#34;feature/1&amp;#34; git checkout &amp;#34;feature/1&amp;#34; # Move to the master branch. git checkout master # Merge the &amp;#34;feature/1&amp;#34; branch and squash the commits.</description>
    </item>
    
    <item>
      <title>Bash oneliners</title>
      <link>https://rtfmdev.github.io/docs/devops-tools/one-liners/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rtfmdev.github.io/docs/devops-tools/one-liners/</guid>
      <description>Replase text in template Replase TEMPLATE_TEXT with $BUILD_NUMBER var inside filename.json.template and save it into filename.json
sed &amp;#34;s/TEMPLATE_TEXT/1.$BUILD_NUMBER/g&amp;#34; \  filename.json.template &amp;gt; filename.</description>
    </item>
    
    <item>
      <title>Useful Tips</title>
      <link>https://rtfmdev.github.io/docs/AWS/useful-tips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rtfmdev.github.io/docs/AWS/useful-tips/</guid>
      <description> Useful tips for AWS Services </description>
    </item>
    
    <item>
      <title></title>
      <link>https://rtfmdev.github.io/docs/kubernetes/ingress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rtfmdev.github.io/docs/kubernetes/ingress/</guid>
      <description>Ingress &amp;quot;An Ingress is a collection of rules that allow inbound connections to reach the cluster Services.&amp;quot;  To allow the inbound connection to reach the cluster Services, Ingress configures a Layer 7 HTTP/HTTPS load balancer for Services and provides the following:
TLS (Transport Layer Security) Name-based virtual hosting Fanout routing Loadbalancing Custom rules.  With Ingress, users do not connect directly to a Service. Users reach the Ingress endpoint, and, from there, the request is forwarded to the desired Service.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://rtfmdev.github.io/docs/kubernetes/helm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rtfmdev.github.io/docs/kubernetes/helm/</guid>
      <description>Helm Helm package manager</description>
    </item>
    
    <item>
      <title></title>
      <link>https://rtfmdev.github.io/docs/kubernetes/advanced_tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rtfmdev.github.io/docs/kubernetes/advanced_tools/</guid>
      <description></description>
    </item>
    
    <item>
      <title>to Read</title>
      <link>https://rtfmdev.github.io/docs/miscellaneous/to-read/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rtfmdev.github.io/docs/miscellaneous/to-read/</guid>
      <description>The Kubernetes Scheduler
Imperative vs. Declarative — a Kubernetes Tutorial
Deploy a Kubernetes Cluster with Cluster Monitoring in Amazon EC2 using Rancher
10 Advanced Tricks with Docker
50 Useful Docker Tutorials, From Beginner to Advanced
Знакомство с Kubernetes
Security as Standard in the Land of Kubernetes.
10 Data Structure, Algorithms, and Programming Courses to Crack Any Coding Interview
CRUD App using Vue.js and Django
Comparing Kubernetes CNI Providers: Flannel, Calico, Canal, and Weave</description>
    </item>
    
    <item>
      <title>Lorem ipsum dolor sit amet</title>
      <link>https://rtfmdev.github.io/posts/second/</link>
      <pubDate>Tue, 01 Oct 2019 14:24:31 +0300</pubDate>
      
      <guid>https://rtfmdev.github.io/posts/second/</guid>
      <description>&lt;p&gt;Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Sed posuere consectetur est at lobortis. Nulla vitae elit libero, a pharetra augue. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>https://rtfmdev.github.io/posts/my-first-post/</link>
      <pubDate>Tue, 01 Oct 2019 11:53:37 +0300</pubDate>
      
      <guid>https://rtfmdev.github.io/posts/my-first-post/</guid>
      <description>&lt;h3 id=&#34;purus-pellentesque-vehicula-condimentum-inceptos&#34;&gt;Purus Pellentesque Vehicula Condimentum Inceptos&lt;/h3&gt;

&lt;p&gt;Nullam id dolor id nibh ultricies vehicula ut id elit. Etiam porta sem malesuada magna mollis euismod. Cras mattis consectetur purus sit amet fermentum. Nullam quis risus eget urna mollis ornare vel eu leo. Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://rtfmdev.github.io/posts/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://rtfmdev.github.io/posts/goisforlovers/</guid>
      <description>&lt;p&gt;My first action release! :)
:)
:)
:)
:)
:)
&lt;a href=&#34;https://github.com/denzalman/hugo-build-action/releases/tag/v0.2&#34;&gt;https://github.com/denzalman/hugo-build-action/releases/tag/v0.2&lt;/a&gt;
Hugo uses the excellent &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; &lt;a href=&#34;https://golang.org/pkg/html/template/&#34;&gt;html/template&lt;/a&gt; library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://rtfmdev.github.io/docs/kubernetes/configMaps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rtfmdev.github.io/docs/kubernetes/configMaps/</guid>
      <description> ConfigMaps and Secrets </description>
    </item>
    
    <item>
      <title></title>
      <link>https://rtfmdev.github.io/docs/kubernetes/monitoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rtfmdev.github.io/docs/kubernetes/monitoring/</guid>
      <description>Services Monitoring Workflow Services Monitoring Workflow consists of three main components:
Collection agent, Metrics Server, and Dashboards.  Typical workflow, including most common components:
 Monitoring agent collects node metrics. cAdvisor collects containers and pods metrics. Monitoring Aggregation service collects data from its own agent and cAdvisor. Data is stored in the monitoring system’s storage. Monitoring aggregation service exposes metrics through APIs and dashboards.  A Few Notes:
 Prometheus is the official monitoring server sponsored and incubated by CNCF.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://rtfmdev.github.io/docs/kubernetes/networking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rtfmdev.github.io/docs/kubernetes/networking/</guid>
      <description>About Flanel: https://blog.laputa.io/kubernetes-flannel-networking-6a1cb1f8ec7c
A ServiceAccount is required to login. A ClusterRoleBinding is used to assign the new ServiceAccount (admin-user) the role of cluster-admin on the cluster.
cat &amp;lt;&amp;lt;EOF | kubectl create -f - apiVersion: v1 kind: ServiceAccount metadata: name: admin-user namespace: kube-system --- apiVersion: rbac.authorization.k8s.io/v1beta1 kind: ClusterRoleBinding metadata: name: admin-user roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-admin subjects: - kind: ServiceAccount name: admin-user namespace: kube-system EOF This means they can control all aspects of Kubernetes.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://rtfmdev.github.io/docs/kubernetes/volume_types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://rtfmdev.github.io/docs/kubernetes/volume_types/</guid>
      <description>Volume Types A directory which is mounted inside a Pod is backed by the underlying Volume Type. A Volume Type decides the properties of the directory, like size, content, default access modes, etc. Some examples of Volume Types are:
emptyDir An empty Volume is created for the Pod as soon as it is scheduled on the worker node. The Volume&amp;rsquo;s life is tightly coupled with the Pod. If the Pod is terminated, the content of emptyDir is deleted forever.</description>
    </item>
    
  </channel>
</rss>